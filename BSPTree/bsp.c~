#include<stdio.h>
#include<stdlib.h>
#include<strings.h>
#include "bsp.h"

//--------------------------------------------------------------
struct Node * make_node() {

  struct Node * n = (struct Node *)malloc(sizeof(struct Node));
  n->left = NULL;
  n->right = NULL;
  n->data = NULL;
  return n;
}
//-------------------------------------------------------------
void free_node(struct Node * n) {

  free(n->data);
  free(n);
}
//-------------------------------------------------------------
struct BSP * create_tree() {

  struct BSP *tree = (struct BSP *)malloc(sizeof(struct BSP));
  tree->root = NULL;
  tree->size = 0;

  return tree;
}
//--------------------------------------------------------------
void insert(struct Node** temp, char *s){
//Insert at node if NULL
//int i = 0;
  struct Node * node = *temp;
if (node  == NULL) {
  struct Node *newNode = make_node();
  newNode-> data = strdup(s);
  (*temp) = newNode;
  return;
 }
if (strcmp(s,node->data) > 0) {
  //temp = temp->left;
  insert(&node->left, s);
 }
if (strcmp(s,node->data) <= 0) {
  insert(&node->right,s);
  //insert(temp, s);
 }

}
//--------------------------------------------------------------
void insert_tree(struct BSP * tree, char *s) {
  //Check to see that there is indeed input
  if (strcmp(s, "") == 0) return;
  //struct Node *temp = tree->root;
   insert(&tree->root, s);
   tree->size++;
}
//-------------------------------------------------------------
int remove_tree(struct BSP * tree, char * s) {
  return 1;


}

//------------------------------------------------------------
int destroy_tree(struct BSP * tree) {
  return 1;

}
//--------------------------------------------------------------
void print(struct Node* node) {
  if (node == NULL) return;

  print(node->left);
  //printf(" /\n");
  printf("%s ", node->data);
  print(node->right);
}
//--------------------------------------------------------------
void print_tree(struct BSP * tree) {
  printf("\nSize: %d\n", tree->size);
  if(tree->root == NULL) {
    printf("Tree is Empty, Root is NULL\n");
    return;

  }
  printf("root is :%s\n", tree->root->data);
  struct Node *temp = tree->root;
  print(temp);
}
//-------------------------------------------------------------
